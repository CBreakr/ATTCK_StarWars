{"version":3,"sources":["Components/HeaderComponent.js","Containers/HeaderContainer.js","Reducers/Actions.js","Components/CharacterComponent.js","Components/CharacterPage.js","Containers/CharacterPageContainer.js","Components/FilmComponent.js","Components/FilmCarouselComponent.js","Components/FilmPage.js","Containers/FilmPageContainer.js","App.js","Reducers/RootReducer.js","Components/ScrollToTopComponent.js","index.js"],"names":["Header","additionalClass","this","props","isFilmPage","classes","character","characterId","characters","find","char","id","className","name","to","React","Component","ConnectedHeader","connect","state","enhancer","fetchOptionsJSON","headers","ActionTypes","DispatchActions","setPageToCharacter","type","setPageToFilm","requestCharacters","dispatch","fetch","then","res","json","data","receiveCharacters","catch","err","console","log","requestFilmImages","receiveFilmImages","films","images","requestCharacterDetails","a","URL","addDetailsToCharacter","receiveCharacterDetails","details","showPreviousFilm","showNextFilm","filmImagesAdded","Promise","all","map","filmURL","fetchFilmDetails","filmDetails","push","sortedFilms","filmSort","copy","i","length","film","j","episode_id","Character","filmsURL","isLink","CharacterDisplay","src","imageURL","alt","CharacterPage","filmImages","key","ConnectedCharacterPage","Film","dateformat","Date","release_date","split","day","date","year","title","director","FilmCarousel","bind","index","currentFilmIndex","onClick","FilmPage","match","params","query","FilmListing","ConnectedFilmPage","App","exact","path","component","initialState","test","replaceCharacterInList","element","addImageToFilm","rootReducer","action","newState","current","forEach","ScrollToTop","prevProps","location","window","scrollTo","children","withRouter","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35bf71ff.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n\r\n    let additionalClass = \"\";\r\n    if(this.props.isFilmPage){\r\n      additionalClass = \"filmHeader\";\r\n    }\r\n    else {\r\n      additionalClass = \"characterHeader\";\r\n    }\r\n\r\n    const classes = `header ${additionalClass}`;\r\n    let character = null;\r\n    if(this.props.characterId){\r\n      character = this.props.characters.find(char => {\r\n        // matching string to number here\r\n        return this.props.characterId == char.id;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <h1>STAR<br />WARS</h1>\r\n        {/* for the film page, we have a link button\r\n          back to the main character page\r\n\r\n          on mobile, the character name will\r\n          be added to the header\r\n\r\n          for the character page, we\r\n          have a simple instruction message\r\n        */}\r\n        {this.props.isFilmPage\r\n          ? <>\r\n            <div className=\"characterHeaderName textShadowDark\">\r\n              {character.name}\r\n            </div>\r\n            <div className=\"backLinkContainer\">\r\n              <Link className=\"backLink\" to=\"/\">\r\n                <span>\r\n                  Pick Another Character\r\n                </span>\r\n              </Link>\r\n            </div>\r\n          </>\r\n          :<div className=\"instructions textShadowDark\">\r\n            Select a character to explore their films\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Header from \"../Components/HeaderComponent\";\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {...state};\r\n}\r\n\r\nconst enhancer = connect(mapStateToProps);\r\nconst ConnectedHeader = enhancer(Header);\r\n\r\nexport default ConnectedHeader;\r\n","\r\nconst characterConfigURL = \"./config/characters.json\";\r\nconst film_imagesConfigURL = \"./config/film_images.json\";\r\n\r\nconst fetchOptionsJSON = {\r\n   headers : {\r\n     'Content-Type': 'application/json',\r\n     'Accept': 'application/json'\r\n   }\r\n};\r\n\r\nexport const ActionTypes = {\r\n  SET_CHARACTER_PAGE:\"SET_CHARACTER_PAGE\",\r\n  SET_FILM_PAGE:\"SET_FILM_PAGE\",\r\n  RECEIVE_CHARACTERS:\"RECEIVE_CHARACTERS\",\r\n  RECEIVE_FILM_IMAGES:\"RECEIVE_FILM_IMAGES\",\r\n  RECEIVE_CHARACTER_DETAILS:\"RECEIVE_CHARACTER_DETAILS\",\r\n  SET_PREVIOUS_FILM:\"SET_PREVIOUS_FILM\",\r\n  SET_NEXT_FILM:\"SET_NEXT_FILM\"\r\n};\r\n\r\nexport const DispatchActions = {\r\n  setPageToCharacter: () => {\r\n    return {\r\n      type:ActionTypes.SET_CHARACTER_PAGE\r\n    };\r\n  },\r\n  setPageToFilm: (characterId) => {\r\n    return {\r\n      type:ActionTypes.SET_FILM_PAGE,\r\n      characterId\r\n    };\r\n  },\r\n  requestCharacters: dispatch => {\r\n    fetch(characterConfigURL, fetchOptionsJSON)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      dispatch(DispatchActions.receiveCharacters(data.characters));\r\n    })\r\n    .catch(err => {\r\n      console.log(\"error request character list\", err);\r\n    });\r\n  },\r\n  // set the character list data\r\n  // once we have it from the local config\r\n  // or already stored in object\r\n  receiveCharacters: characters => {\r\n    return {\r\n      type:ActionTypes.RECEIVE_CHARACTERS,\r\n      characters\r\n    };\r\n  },\r\n  requestFilmImages: dispatch => {\r\n    fetch(film_imagesConfigURL, fetchOptionsJSON)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      dispatch(DispatchActions.receiveFilmImages(data.films));\r\n    })\r\n    .catch(err => {\r\n      console.log(\"error request film images\", err);\r\n    });\r\n  },\r\n  // set the film images\r\n  // once we have it from the local config\r\n  // or already stored in object\r\n  receiveFilmImages: images => {\r\n    return {\r\n      type: ActionTypes.RECEIVE_FILM_IMAGES,\r\n      images\r\n    };\r\n  },\r\n  requestCharacterDetails: async (character, dispatch) => {\r\n    // I can cache this\r\n    // because there's no reason to make this call every time\r\n    // with data that updates so infrequently\r\n\r\n    fetch(character.URL, fetchOptionsJSON)\r\n    .then(res => res.json())\r\n    .then(async (data) => {\r\n      await addDetailsToCharacter(character, data);\r\n      dispatch(DispatchActions.receiveCharacterDetails(character));\r\n    })\r\n    .catch(err => {\r\n      console.log(\"error request films for character\", err, character);\r\n    });\r\n  },\r\n  // set the character and films details\r\n  // once we have it from the API\r\n  // or already stored in object\r\n  receiveCharacterDetails: (character, details) => {\r\n    return {\r\n      type: ActionTypes.RECEIVE_CHARACTER_DETAILS,\r\n      character,\r\n      details\r\n    };\r\n  },\r\n  // these methods are for navigating\r\n  // the film carousel\r\n  showPreviousFilm: dispatch => {\r\n    return {\r\n      type: ActionTypes.SET_PREVIOUS_FILM\r\n    }\r\n  },\r\n  showNextFilm: dispatch => {\r\n    return {\r\n      type: ActionTypes.SET_NEXT_FILM\r\n    }\r\n  }\r\n};\r\n\r\n//\r\n// trigger all of the API calls for film\r\n// based on the list from the character\r\n// and then wait for them all to complete\r\n// before sorting them\r\n//\r\nasync function addDetailsToCharacter(character, details){\r\n  character.films = [];\r\n  character.filmImagesAdded = false;\r\n\r\n  await Promise.all(\r\n    details.films.map(async (filmURL) => {\r\n      const filmDetails = await fetchFilmDetails(filmURL);\r\n      if(filmDetails){\r\n        character.films.push(filmDetails);\r\n      }\r\n      else{\r\n        console.log(\"error getting film details\", filmURL);\r\n      }\r\n    }\r\n  ));\r\n\r\n  const sortedFilms = filmSort(character.films);\r\n  character.films = sortedFilms;\r\n}\r\n\r\n//\r\n// sort these films in order of episode_id\r\n//\r\nexport function filmSort(films){\r\n  // these are short lists, so just an insertion sort will do\r\n  const copy = [...films];\r\n\r\n  for(let i = 0; i < copy.length; i++){\r\n    let film = copy[i];\r\n    let j = i-1;\r\n    // walk down the already-sorted films\r\n    for(; j >= 0 && copy[j].episode_id > film.episode_id; j--){\r\n      copy[j+1] = copy[j];\r\n    }\r\n    copy[j+1] = film;\r\n  }\r\n\r\n  return copy;\r\n}\r\n\r\n//\r\n// make the call to the API\r\n//\r\nasync function fetchFilmDetails(filmURL){\r\n  const res = await fetch(filmURL, fetchOptionsJSON);\r\n  return await res.json();\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Character extends React.Component {\r\n\r\n  render(){\r\n    const character = this.props.character;\r\n    const filmsURL = `/films/${character.id}`;\r\n\r\n    const isLink = this.props.isLink;\r\n\r\n    return (\r\n      <div className=\"characterContainer\">\r\n        {\r\n          isLink\r\n        ? <Link className=\"characterLink\" to={filmsURL}>\r\n            <CharacterDisplay character={this.props.character} isLink={true} />\r\n          </Link>\r\n        : <CharacterDisplay character={this.props.character} isLink={false} />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst CharacterDisplay = (props) => {\r\n  let classes = \"innerCharacter\";\r\n  if(props.isLink){\r\n    classes = `${classes} innerCharacterHover`;\r\n  }\r\n\r\n  return (\r\n    <span className={classes}>\r\n      <span className=\"characterName textShadowDark\">\r\n        {props.character.name}\r\n      </span>\r\n      <img className=\"characterCard\" src={props.character.imageURL} alt={props.character.name} />\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Character;\r\n","\r\nimport React from \"react\";\r\n\r\nimport Character from \"./CharacterComponent\";\r\n\r\nclass CharacterPage extends React.Component{\r\n\r\n  componentDidMount(){\r\n    // request any data we don't yet have\r\n\r\n    if(!this.props.filmImages){\r\n      this.props.requestFilmImages();\r\n    }\r\n\r\n    if(!this.props.characters){\r\n      this.props.requestCharacters();\r\n    }\r\n\r\n    // always set the current page\r\n    this.props.setPageToCharacter();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <div className=\"characterPage\">\r\n          {\r\n            this.props.characters\r\n            ? this.props.characters.map(character => (\r\n                <Character key={character.name} character={character} isLink={true} />\r\n              ))\r\n            : <span className=\"loading\">Loading</span>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterPage;\r\n","\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { DispatchActions } from \"../Reducers/Actions\";\r\n\r\nimport CharacterPage from \"../Components/CharacterPage\";\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {...state};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setPageToCharacter: () => {\r\n      dispatch(DispatchActions.setPageToCharacter());\r\n    },\r\n    requestCharacters: () => {\r\n      DispatchActions.requestCharacters(dispatch);\r\n    },\r\n    requestFilmImages: () => {\r\n      DispatchActions.requestFilmImages(dispatch);\r\n    }\r\n  }\r\n};\r\n\r\nconst enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nconst ConnectedCharacterPage = enhancer(CharacterPage);\r\n\r\nexport default ConnectedCharacterPage;\r\n","\r\nimport React from \"react\";\r\n\r\nimport dateformat from \"dateformat\";\r\n\r\nclass Film extends React.Component {\r\n\r\n  render(){\r\n    const film = this.props.film;\r\n\r\n    /*\r\n    METADATA:\r\n    title\r\n    episode_id\r\n    opening_crawl\r\n    director\r\n    release_date {'2005-05-19' ==> 'Thursday, May 19 2005'}\r\n    */\r\n\r\n    const release_date = dateformat(new Date(film.release_date), \"dddd, mmmm dS, yyyy\");\r\n    const [day, date, year] = release_date.split(\",\");\r\n\r\n    return (\r\n      <div className=\"filmComponent\">\r\n        <div className=\"filmTitle textShadowDark\">\r\n          {film.title}\r\n        </div>\r\n        <div className=\"filmImageContainer\">\r\n          <img className=\"filmImage\" src={film.imageURL} alt={film.title} />\r\n        </div>\r\n        <span className=\"filmMeta\">\r\n          <div className=\"textShadowDark filmDirectedByContainer\">\r\n            <div className=\"filmDirectedByHeader\">DIRECTED&nbsp;BY:</div>\r\n            <br />\r\n            <div className=\"filmDirectedBy\">{film.director}</div>\r\n          </div>\r\n          <div className=\"textShadowDark filmReleasedContainer\">\r\n            <div className=\"filmReleasedHeader\">RELEASED:</div>\r\n            <br />\r\n            <div className=\"filmReleasedDayName\">{`${day},`}</div>\r\n            <br />\r\n            <div className=\"filmReleasedMonthAndDate\">{`${date}`}</div>\r\n            <br />\r\n            <div className=\"filmReleasedYear\">{year}</div>\r\n          </div>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Film;\r\n","\r\nimport React from \"react\";\r\n\r\nimport Film from \"./FilmComponent\";\r\n\r\nclass FilmCarousel extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.showPreviousFilm = this.showPreviousFilm.bind(this);\r\n    this.showNextFilm = this.showNextFilm.bind(this);\r\n  }\r\n\r\n  showPreviousFilm = () => {\r\n    this.props.showPreviousFilm();\r\n  }\r\n\r\n  showNextFilm = () => {\r\n    this.props.showNextFilm();\r\n  }\r\n\r\n  render() {\r\n    let character = null;\r\n    let index = null;\r\n    let length = 0;\r\n    let film = null;\r\n\r\n    if(\r\n        this.props.character\r\n        && this.props.character.films\r\n        && this.props.currentFilmIndex != null\r\n    ){\r\n      character = this.props.character;\r\n      index = this.props.currentFilmIndex;\r\n      length = character.films.length;\r\n      film = character.films[index];\r\n    }\r\n\r\n    return (\r\n      <div className=\"filmCarousel\">\r\n      {/* only display if we have both a character and a film */}\r\n      {\r\n        character && film\r\n        ? <>\r\n          {/* previous button */}\r\n          {\r\n            index > 0\r\n            ? <div\r\n                className=\"filmCarouselButton filmCarouselPrevious\"\r\n                onClick={this.showPreviousFilm}\r\n              >\r\n                <span>\r\n                  <i className=\"fas fa-chevron-left\"></i>\r\n                </span>\r\n              </div>\r\n            : \"\"\r\n          }\r\n\r\n          {/* the main display of film information */}\r\n          <Film key={film.episode_id} film={film} />\r\n\r\n          {/* next button */}\r\n          {\r\n            index + 1 < length\r\n            ? <div\r\n                className=\"filmCarouselButton filmCarouselNext\"\r\n                onClick={this.showNextFilm}\r\n              >\r\n                <span>\r\n                  <i className=\"fas fa-chevron-right\"></i>\r\n                </span>\r\n              </div>\r\n            : \"\"\r\n          }\r\n        </>\r\n        : <span className=\"loading\">Loading</span>\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilmCarousel;\r\n","\r\nimport React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport MediaQuery from \"react-responsive\";\r\n\r\nimport Character from \"./CharacterComponent\";\r\nimport Film from \"./FilmComponent\";\r\nimport FilmCarousel from \"./FilmCarouselComponent\";\r\n\r\nclass FilmPage extends React.Component {\r\n\r\n  componentDidMount(){\r\n    // nothing to do in this case\r\n    if(!this.props.characters){\r\n      return;\r\n    }\r\n\r\n    // get the character id from the query string\r\n    const characterId = this.props.match.params.characterId;\r\n\r\n    const character = this.props.characters.find(char => {\r\n      // matching string to number here\r\n      return characterId == char.id;\r\n    });\r\n\r\n    // if we don't have the films, go to the API\r\n    // otherwise just set them and continue with the render\r\n    if(character && !character.films){\r\n      this.props.requestCharacterDetails(character);\r\n    }\r\n    else if(character){\r\n      this.props.receiveCharacterDetails(character);\r\n    }\r\n\r\n    // always set the current page\r\n    this.props.setPageToFilm(characterId);\r\n  }\r\n\r\n  render(){\r\n    // redirect to the main page if the user\r\n    // tries to enter a URL without first having\r\n    // loaded the character data\r\n    if(!this.props.characters){\r\n      return (\r\n        <Redirect to=\"/\" />\r\n      );\r\n    }\r\n\r\n    const characterId = this.props.match.params.characterId;\r\n    const character = this.props.characters.find(char => {\r\n      // matching string to number here\r\n      return characterId == char.id;\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {/* handle switching between display modes in here */}\r\n\r\n        {/* mobile version */}\r\n        <MediaQuery query=\"(max-width:768px)\">\r\n          <FilmListing character={character} />\r\n        </MediaQuery>\r\n\r\n        {/* web versions */}\r\n        <MediaQuery query=\"(min-width:769px)\">\r\n          <div className=\"filmMainDisplay\">\r\n            <Character character={character} />\r\n            <FilmCarousel\r\n              character={character}\r\n              currentFilmIndex={this.props.currentFilmIndex}\r\n              showPreviousFilm={this.props.showPreviousFilm}\r\n              showNextFilm={this.props.showNextFilm}\r\n            />\r\n          </div>\r\n        </MediaQuery>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// just a simple dump of the Films as divs\r\nconst FilmListing = (props) => {\r\n  const character = props.character;\r\n\r\n  return (\r\n      <div className=\"filmListing\">\r\n        {\r\n          character && character.films\r\n          ? character.films.map(film => (\r\n              <Film key={film.episode_id} film={film} />\r\n            ))\r\n          : <span className=\"loading\">Loading</span>\r\n        }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default FilmPage;\r\n","\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { DispatchActions } from \"../Reducers/Actions.js\";\r\n\r\nimport FilmPage from \"../Components/FilmPage\";\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {...state};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setPageToFilm: (characterId) => {\r\n      dispatch(DispatchActions.setPageToFilm(characterId));\r\n    },\r\n    requestCharacterDetails: character => {\r\n      DispatchActions.requestCharacterDetails(character, dispatch);\r\n    },\r\n    receiveCharacterDetails: character => {\r\n      DispatchActions.receiveCharacterDetails(character);\r\n    },\r\n    showPreviousFilm: () => {\r\n      dispatch(DispatchActions.showPreviousFilm());\r\n    },\r\n    showNextFilm: () => {\r\n      dispatch(DispatchActions.showNextFilm());\r\n    }\r\n  }\r\n};\r\n\r\nconst enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nconst ConnectedFilmPage = enhancer(FilmPage);\r\n\r\nexport default ConnectedFilmPage;\r\n","import React from 'react';\nimport './App.css';\nimport './Media.css';\n\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Header from \"./Containers/HeaderContainer\";\nimport CharacterPage from \"./Containers/CharacterPageContainer\";\nimport FilmPage from \"./Containers/FilmPageContainer\";\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"mainContent\">\n          <Switch>\n            <Route exact path=\"/films/:characterId\" component={FilmPage} />\n            <Route exact path=\"/\" component={CharacterPage} />\n            {/*\n                redirect any other routes back to the main page\n            */}\n            <Redirect to=\"/\" />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\r\nimport { ActionTypes } from \"./Actions\";\r\n\r\nconst initialState = {\r\n  test:\"this is a test value\",\r\n  characters:[],\r\n  filmImages:[],\r\n  characterId: null,\r\n  isFilmPage:false,\r\n  currentFilmIndex:null\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n\r\n  const newState = {...state};\r\n\r\n  switch(action.type){\r\n    case ActionTypes.SET_CHARACTER_PAGE:\r\n      newState.isFilmPage = false;\r\n      newState.characterId = null;\r\n      newState.currentFilmIndex = null;\r\n      break;\r\n    case ActionTypes.SET_FILM_PAGE:\r\n      newState.isFilmPage = true;\r\n      newState.characterId = action.characterId;\r\n      newState.currentFilmIndex = 0;\r\n      break;\r\n    case ActionTypes.RECEIVE_CHARACTERS:\r\n      newState.characters = action.characters;\r\n      break;\r\n    case ActionTypes.RECEIVE_FILM_IMAGES:\r\n      newState.filmImages = action.images;\r\n      break;\r\n    case ActionTypes.RECEIVE_CHARACTER_DETAILS:\r\n      // find the character\r\n      // substitute the new character in\r\n      // add the images to the films\r\n\r\n      const characters = state.characters;\r\n      newState.characters = [...characters];\r\n      const current = replaceCharacterInList(newState, action.character);\r\n\r\n      if(!current.filmImagesAdded){\r\n        current.films.forEach(film => {\r\n          addImageToFilm(newState, film);\r\n        });\r\n        current.filmImagesAdded = true;\r\n      }\r\n\r\n      break;\r\n    case ActionTypes.SET_PREVIOUS_FILM:\r\n      // check to make sure that we're in bounds\r\n      if(newState.currentFilmIndex > 0){\r\n        newState.currentFilmIndex--;\r\n      }\r\n      break;\r\n    case ActionTypes.SET_NEXT_FILM:\r\n      if(newState.characterId && newState.characters){\r\n        const character = newState.characters.find(char => {\r\n          // matching string to number here\r\n          return newState.characterId == char.id;\r\n        });\r\n\r\n        // check to make sure that we're in bounds\r\n        if(\r\n          character\r\n          && character.films\r\n          && character.films.length > newState.currentFilmIndex+1\r\n        ){\r\n          newState.currentFilmIndex++;\r\n        }\r\n      }\r\n      break;\r\n    default:\r\n      ;\r\n  }\r\n\r\n  return newState;\r\n}\r\n\r\n//\r\n// replace a character in the state list\r\n// with a new reference, so that we don't\r\n// mutate the state\r\n//\r\nfunction replaceCharacterInList(state, character){\r\n  // return the character that's found\r\n  let index = -1;\r\n  const char = state.characters.find(element => {\r\n    index++;\r\n    return character.id === element.id;\r\n  });\r\n\r\n  if(char){\r\n    state.characters[index] = character;\r\n  }\r\n\r\n  return char;\r\n}\r\n\r\n//\r\n// attach the imageURL from the\r\n// config list to the state object\r\n//\r\nfunction addImageToFilm(state, film){\r\n  const match = state.filmImages.find(element => {\r\n    return film.episode_id === element.episode_id;\r\n  });\r\n\r\n  if(match){\r\n    film.imageURL = match.imageURL;\r\n  }\r\n\r\n  return match;\r\n}\r\n\r\nexport default rootReducer;\r\n","\r\nimport React from \"react\";\r\nimport { withRouter } from \"react-router\"\r\n\r\n// from react router code samples\r\n\r\n/*\r\nthis component will wrap the app,\r\nand ensure that when a link is\r\nfollowed that we scroll to the top\r\n*/\r\n\r\nclass ScrollToTop extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport App from './App';\nimport rootReducer from \"./Reducers/RootReducer\";\n\nimport ScrollToTop from \"./Components/ScrollToTopComponent\";\n\nconst store = createStore(rootReducer,\n  {},\nwindow.__REDUX_DEVTOOLS_EXTENSION__ &&\nwindow.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <ScrollToTop>\n        <App store={store} />\n      </ScrollToTop>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}